name    = Pod-Usage
author  = Marek Rouchal <marekr@cpan.org>
license = Perl_5
copyright_holder = Marek Rouchal <marekr@cpan.org>
copyright_year   = 2013

[ReadmeAnyFromPod / Markdown_Readme]
type = gfm
source_filename = lib/Pod/Usage.pm
filename = README.md
location = root

[Regenerate::AfterReleasers]
plugin = Markdown_Readme

[@Starter::Git]
revision = 4
managed_versions = 1
installer = MakeMaker::Awesome
RewriteVersion.global = 1
NextRelease.format = %-9v %{yyyy-MM-dd}d
regenerate = Makefile.PL
regenerate = META.json
regenerate = README.md
regenerate = LICENSE
regenerate = t/00-report-prereqs.t
regenerate = t/00-report-prereqs.dd
ExecDir.dir = script

;MakeMaker::Awesome.exe_file = scripts/pod2usage
MakeMaker::Awesome.WriteMakefile_arg[0] = EXE_FILES => MY::exe()
MakeMaker::Awesome.WriteMakefile_arg[1] = PL_FILES => { MY::pod2usage() . '.PL', MY::pod2usage() }
MakeMaker::Awesome.WriteMakefile_arg[2] = INSTALLDIRS  => ($] < 5.012 ? 'perl' : 'site')
MakeMaker::Awesome.WriteMakefile_arg[3] = clean => { FILES => join( ' ', @{MY::exe()}) }
MakeMaker::Awesome.delimiter =  |
MakeMaker::Awesome.footer[00] = |# <custom footer>
MakeMaker::Awesome.footer[01] = |package MY; use strict; use warnings;
MakeMaker::Awesome.footer[02] = |use File::Spec ();
MakeMaker::Awesome.footer[03] = |sub SCRIPTS { qw( pod2usage ) }
MakeMaker::Awesome.footer[04] = |sub script { File::Spec->catfile ('scripts', @_) }
MakeMaker::Awesome.footer[05] = |sub pod2usage { MY::exe()->[0] or die "pod2usage failed" }
MakeMaker::Awesome.footer[06] = |sub exe {
MakeMaker::Awesome.footer[07] = |   if ( $^O eq 'VMS' ) {
MakeMaker::Awesome.footer[08] = |     return [ map { script("$_.com") } SCRIPTS() ];
MakeMaker::Awesome.footer[09] = |   }
MakeMaker::Awesome.footer[10] = |   return [ map { script($_) } SCRIPTS() ];
MakeMaker::Awesome.footer[11] = |}
MakeMaker::Awesome.footer[12] = |# </custom footer>

[Prereqs::FromCPANfile]

[MinimumPerl]
perl = 5.006

[Git::Contributors]
[GithubMeta]
issues  = 1
user    = Dual-Life

[CheckChangeLog]
;[CheckChangesHasContent]
;[Test::ChangesHasContent]

[Test::Kwalitee]
skiptest = no_symlinks
[Test::Version]
filename_match = qr/Usage\.pm$/
[Test::Pod::Coverage::Configurable]
trustme = Pod::Usage => qr/^begin_pod$/
trustme = Pod::Usage => qr/^cmd_i$/
trustme = Pod::Usage => qr/^pod2usage$/
trustme = Pod::Usage => qr/^preprocess_paragraph$/
trustme = Pod::Usage => qr/^select$/
trustme = Pod::Usage => qr/^seq_i$/
trustme = Pod::Usage => qr/^start_document$/

[Test::PodSpelling]
wordlist = Pod::Wordlist
spell_cmd = hunspell -l
stopword = CPAN
